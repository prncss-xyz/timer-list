// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`list page should render properly 1`] = `
[
  <View
    style={
      {
        "alignItems": "center",
        "flexDirection": "row",
        "justifyContent": "space-between",
      }
    }
  >
    <View
      accessibilityLabel="play"
      accessibilityState={
        {
          "busy": undefined,
          "checked": undefined,
          "disabled": undefined,
          "expanded": undefined,
          "selected": undefined,
        }
      }
      accessibilityValue={
        {
          "max": undefined,
          "min": undefined,
          "now": undefined,
          "text": undefined,
        }
      }
      accessible={true}
      collapsable={false}
      focusable={true}
      onBlur={[Function]}
      onClick={[Function]}
      onFocus={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        {
          "height": 35,
          "width": 35,
        }
      }
    >
      <Text />
    </View>
    <View
      accessibilityLabel="countdown"
      accessibilityState={
        {
          "busy": undefined,
          "checked": undefined,
          "disabled": undefined,
          "expanded": undefined,
          "selected": undefined,
        }
      }
      accessibilityValue={
        {
          "max": undefined,
          "min": undefined,
          "now": undefined,
          "text": undefined,
        }
      }
      accessible={true}
      collapsable={false}
      focusable={true}
      onBlur={[Function]}
      onClick={[Function]}
      onFocus={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
    >
      <Text
        style={
          [
            {
              "borderColor": "#3DD68C",
              "color": "#3DD68C",
            },
            {
              "borderStyle": "solid",
              "borderWidth": 1,
              "justifyContent": "center",
              "padding": 10,
              "textAlign": "center",
            },
            {
              "fontFamily": "RobotoMono-Medium",
              "fontWeight": "500",
            },
            {
              "fontSize": 28,
            },
          ]
        }
      >
        00:00:02
      </Text>
    </View>
    <View
      accessibilityLabel="reset"
      accessibilityState={
        {
          "busy": undefined,
          "checked": undefined,
          "disabled": undefined,
          "expanded": undefined,
          "selected": undefined,
        }
      }
      accessibilityValue={
        {
          "max": undefined,
          "min": undefined,
          "now": undefined,
          "text": undefined,
        }
      }
      accessible={true}
      collapsable={false}
      focusable={true}
      onBlur={[Function]}
      onClick={[Function]}
      onFocus={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        {
          "height": 35,
          "width": 35,
        }
      }
    >
      <Text />
    </View>
  </View>,
  <View
    style={
      {
        "borderBottomWidth": 1,
        "borderColor": "#0090FF",
        "borderStyle": "solid",
        "height": 35,
      }
    }
  />,
  <RCTScrollView
    CellRendererComponent={[Function]}
    ItemSeparatorComponent={[Function]}
    contentContainerStyle={{}}
    data={
      [
        {
          "id": "a",
          "seconds": 2,
        },
        {
          "id": "b",
          "seconds": 3,
        },
      ]
    }
    getItem={[Function]}
    getItemCount={[Function]}
    keyExtractor={[Function]}
    onContentSizeChange={[Function]}
    onLayout={[Function]}
    onMomentumScrollBegin={[Function]}
    onMomentumScrollEnd={[Function]}
    onScroll={[Function]}
    onScrollBeginDrag={[Function]}
    onScrollEndDrag={[Function]}
    removeClippedSubviews={false}
    renderItem={[Function]}
    scrollEventThrottle={0.0001}
    stickyHeaderIndices={[]}
    viewabilityConfigCallbackPairs={[]}
  >
    <View>
      <View
        animatedStyle={
          {
            "value": {},
          }
        }
        cellKey="a"
        collapsable={false}
        entering={[Function]}
        exiting={[Function]}
        index={0}
        item={
          {
            "id": "a",
            "seconds": 2,
          }
        }
        layout={[Function]}
        onFocusCapture={[Function]}
        onLayout={[Function]}
        style={
          {
            "width": "100%",
          }
        }
      >
        <View
          aria-label="current"
          style={
            {
              "alignItems": "center",
              "flexDirection": "row",
              "justifyContent": "space-between",
              "paddingBottom": 10,
              "paddingTop": 10,
            }
          }
        >
          <View
            accessibilityLabel="duration"
            accessibilityState={
              {
                "busy": undefined,
                "checked": undefined,
                "disabled": undefined,
                "expanded": undefined,
                "selected": undefined,
              }
            }
            accessibilityValue={
              {
                "max": undefined,
                "min": undefined,
                "now": undefined,
                "text": undefined,
              }
            }
            accessible={true}
            collapsable={false}
            focusable={true}
            onBlur={[Function]}
            onClick={[Function]}
            onFocus={[Function]}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
          >
            <Text
              style={
                [
                  {
                    "color": "#3DD68C",
                  },
                  {
                    "alignItems": "flex-start",
                    "justifyContent": "center",
                    "padding": 5,
                  },
                  {
                    "fontFamily": "RobotoMono-Medium",
                    "fontWeight": "500",
                  },
                  {
                    "fontSize": 28,
                  },
                ]
              }
            >
              00:00:02
            </Text>
          </View>
          <View
            style={
              {
                "flexDirection": "row",
                "gap": 15,
              }
            }
          >
            <View
              accessibilityLabel="duplicate"
              accessibilityState={
                {
                  "busy": undefined,
                  "checked": undefined,
                  "disabled": undefined,
                  "expanded": undefined,
                  "selected": undefined,
                }
              }
              accessibilityValue={
                {
                  "max": undefined,
                  "min": undefined,
                  "now": undefined,
                  "text": undefined,
                }
              }
              accessible={true}
              collapsable={false}
              focusable={true}
              onBlur={[Function]}
              onClick={[Function]}
              onFocus={[Function]}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              style={
                {
                  "height": 35,
                  "width": 35,
                }
              }
            >
              <Text />
            </View>
            <View
              accessibilityLabel="remove"
              accessibilityState={
                {
                  "busy": undefined,
                  "checked": undefined,
                  "disabled": undefined,
                  "expanded": undefined,
                  "selected": undefined,
                }
              }
              accessibilityValue={
                {
                  "max": undefined,
                  "min": undefined,
                  "now": undefined,
                  "text": undefined,
                }
              }
              accessible={true}
              collapsable={false}
              focusable={true}
              onBlur={[Function]}
              onClick={[Function]}
              onFocus={[Function]}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              style={
                {
                  "height": 35,
                  "width": 35,
                }
              }
            >
              <Text />
            </View>
            <View
              accessibilityLabel="edit"
              accessibilityState={
                {
                  "busy": undefined,
                  "checked": undefined,
                  "disabled": undefined,
                  "expanded": undefined,
                  "selected": undefined,
                }
              }
              accessibilityValue={
                {
                  "max": undefined,
                  "min": undefined,
                  "now": undefined,
                  "text": undefined,
                }
              }
              accessible={true}
              collapsable={false}
              focusable={true}
              onBlur={[Function]}
              onClick={[Function]}
              onFocus={[Function]}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              style={
                {
                  "height": 35,
                  "width": 35,
                }
              }
            >
              <Text />
            </View>
          </View>
        </View>
        <View
          style={
            {
              "borderBottomWidth": 1,
              "borderColor": "#0090FF",
              "borderWidth": 0,
              "width": "100%",
            }
          }
        />
      </View>
      <View
        animatedStyle={
          {
            "value": {},
          }
        }
        cellKey="b"
        collapsable={false}
        entering={[Function]}
        exiting={[Function]}
        index={1}
        item={
          {
            "id": "b",
            "seconds": 3,
          }
        }
        layout={[Function]}
        onFocusCapture={[Function]}
        onLayout={[Function]}
        style={
          {
            "width": "100%",
          }
        }
      >
        <View
          style={
            {
              "alignItems": "center",
              "flexDirection": "row",
              "justifyContent": "space-between",
              "paddingBottom": 10,
              "paddingTop": 10,
            }
          }
        >
          <View
            accessibilityLabel="duration"
            accessibilityState={
              {
                "busy": undefined,
                "checked": undefined,
                "disabled": undefined,
                "expanded": undefined,
                "selected": undefined,
              }
            }
            accessibilityValue={
              {
                "max": undefined,
                "min": undefined,
                "now": undefined,
                "text": undefined,
              }
            }
            accessible={true}
            collapsable={false}
            focusable={true}
            onBlur={[Function]}
            onClick={[Function]}
            onFocus={[Function]}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
          >
            <Text
              style={
                [
                  {
                    "color": "#0090FF",
                  },
                  {
                    "alignItems": "flex-start",
                    "justifyContent": "center",
                    "padding": 5,
                  },
                  {
                    "fontFamily": "RobotoMono-Medium",
                    "fontWeight": "500",
                  },
                  {
                    "fontSize": 28,
                  },
                ]
              }
            >
              00:00:03
            </Text>
          </View>
          <View
            style={
              {
                "flexDirection": "row",
                "gap": 15,
              }
            }
          >
            <View
              accessibilityLabel="duplicate"
              accessibilityState={
                {
                  "busy": undefined,
                  "checked": undefined,
                  "disabled": undefined,
                  "expanded": undefined,
                  "selected": undefined,
                }
              }
              accessibilityValue={
                {
                  "max": undefined,
                  "min": undefined,
                  "now": undefined,
                  "text": undefined,
                }
              }
              accessible={true}
              collapsable={false}
              focusable={true}
              onBlur={[Function]}
              onClick={[Function]}
              onFocus={[Function]}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              style={
                {
                  "height": 35,
                  "width": 35,
                }
              }
            >
              <Text />
            </View>
            <View
              accessibilityLabel="remove"
              accessibilityState={
                {
                  "busy": undefined,
                  "checked": undefined,
                  "disabled": undefined,
                  "expanded": undefined,
                  "selected": undefined,
                }
              }
              accessibilityValue={
                {
                  "max": undefined,
                  "min": undefined,
                  "now": undefined,
                  "text": undefined,
                }
              }
              accessible={true}
              collapsable={false}
              focusable={true}
              onBlur={[Function]}
              onClick={[Function]}
              onFocus={[Function]}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              style={
                {
                  "height": 35,
                  "width": 35,
                }
              }
            >
              <Text />
            </View>
            <View
              accessibilityLabel="edit"
              accessibilityState={
                {
                  "busy": undefined,
                  "checked": undefined,
                  "disabled": undefined,
                  "expanded": undefined,
                  "selected": undefined,
                }
              }
              accessibilityValue={
                {
                  "max": undefined,
                  "min": undefined,
                  "now": undefined,
                  "text": undefined,
                }
              }
              accessible={true}
              collapsable={false}
              focusable={true}
              onBlur={[Function]}
              onClick={[Function]}
              onFocus={[Function]}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              style={
                {
                  "height": 35,
                  "width": 35,
                }
              }
            >
              <Text />
            </View>
          </View>
        </View>
      </View>
    </View>
  </RCTScrollView>,
  <View
    accessibilityLabel="clear all"
    accessibilityState={
      {
        "busy": undefined,
        "checked": undefined,
        "disabled": undefined,
        "expanded": undefined,
        "selected": undefined,
      }
    }
    accessibilityValue={
      {
        "max": undefined,
        "min": undefined,
        "now": undefined,
        "text": undefined,
      }
    }
    accessible={true}
    collapsable={false}
    focusable={true}
    onBlur={[Function]}
    onClick={[Function]}
    onFocus={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
  >
    <Text
      style={
        [
          {
            "borderWidth": 1,
            "fontFamily": "Inter-SemiBold",
            "fontSize": 20,
            "fontWeight": "600",
            "padding": 5,
            "textAlign": "center",
            "textTransform": "uppercase",
          },
          {
            "borderColor": "#FFC53D",
            "color": "#FFC53D",
          },
        ]
      }
    >
      clear all
    </Text>
  </View>,
]
`;
